
#Necessario instalar
#sudo pip3 install python3-nmap
#sudo dnf install python3-nmap
#sudo python3 -m pip install --upgrade pip

from socket import *
import threading
from scapy.all import *
import logging
import subprocess
from socket import gethostbyname
import nmap3
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)

# da uma limpada nos alertas de log verbose
rede = input("Digite uma rede :")
 
conf.verb = 0
MAX_THREADS = 15
# semaphore faz o controle da qtd de threads que estao rodando
# quando chega no maximo ele pausa a execução enquanto as threads estao rodando
semaphore = threading.BoundedSemaphore(MAX_THREADS)
# o Lock() atua como objeto de exclusao mutua, impede que duas threads tentarem consumir o mesmo pacote
# a threads estao usando o mesmo terminal para printar (recurso compartilhado)
# regiao critica = areas que o print é chamado
lock = threading.Lock()

def ping(ip,ports):
    cmd = f"ping -c 1 -w 1 {ip}"
    #Envia comando como shell linux
    sendCmd = subprocess.run(cmd,stdout=subprocess.PIPE, shell=True)

    if sendCmd.returncode == 0:
    
        with lock:
            print("----------------------------------------")
            cmd2 = f"host {ip} | cut -d' '  -f5 | sed -n '1p'" #pega hostname
            cmdHostName = subprocess.run(cmd2,shell=True, capture_output=True, text=True)
            
            print(f"[+]ON - Host: {ip} - Hostname: {cmdHostName.stdout}")
            
            scanBanner(ip,ports)

    semaphore.release()
   
def scanBanner(ip,ports):

    hostAlvo = ip
    portas = ports

    try:
        print("Conectando...\n")
        ipAlvo = gethostbyname(hostAlvo)
    except:
        exit(f"Nao foi possivel resolver o hostname {hostAlvo}")

    else:
        with socket(AF_INET,SOCK_STREAM) as connSkt:
            try:
                connSkt.connect((hostAlvo,portas))
                bannerMsg = connSkt.recv(1024).decode()
                
                if(bannerMsg.count("Cisco") > 0):
                    print("É roteador cisco\n")
                
                print(f" Banner: {bannerMsg} ")
            except:
                pass
        
    scanNmap(ipAlvo, portas)

def scanNmap(ipAlvo, portas):
    #cmd nmap 
    #print("bora scanear")
    nmapScan = nmap3.NmapScanTechniques()
    resultado = nmapScan.nmap_tcp_scan(ipAlvo, f'-p {portas}')
    #para cada porta do resultado do scan
    for porta in resultado[ipAlvo]['ports']:

        print(f"[*]{porta['portid']:>5}/tcp :: {porta['state'].upper()}")
 
for i in range(1,256):
    semaphore.acquire()
    threading.Thread(target=ping, args=(f"{rede}.{i}",22)).start()

#10.100.56
    
